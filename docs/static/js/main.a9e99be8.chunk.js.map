{"version":3,"sources":["components/AddCategory.js","helpers/obtenerGifts.js","components/MarcoParaGifts.js","components/GifColeccion.js","hooks/useFetchGifs.js","GiftExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","val","type","value","onChange","valor","target","obtenerGift","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","MarcoParaGifts","className","src","alt","GifColeccion","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GiftExpertApp","categorias","category","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAqB7C,OACI,uBAAMC,SAVQ,SAACC,GACfA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAmBO,OAErCN,EAAc,MAKlB,UACI,sDACA,uBACAO,KAAK,OACLC,MAAQT,EACRU,SApBiB,SAACC,GACtBV,EAAeU,EAAMC,OAAOH,c,+BCRvBI,EAAW,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACjBC,EADiB,iDAC+BC,UAAUH,GADzC,+DAEJI,MAAMF,GAFF,cAEjBG,EAFiB,gBAGFA,EAAKC,OAHH,uBAGhBC,EAHgB,EAGhBA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAM1Ca,QAAQC,IAAIR,GAfW,kBAiBhBA,GAjBgB,4CAAH,sDCDXS,EAAiB,SAAC,GAAqB,IAAnBN,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEtC,OADAa,QAAQC,IAAIL,EAAGC,EAAMV,GAEjB,sBAAKgB,UAAW,6CAAhB,UACI,qBAAKC,IAAMjB,EAAKkB,IAAKR,IACrB,4BAAIA,QCFHS,EAAe,SAAC,GAAiB,IAAfrB,EAAc,EAAdA,UAAc,ECDjB,SAACA,GAAe,IAAD,EACbf,mBAAS,CAC/BsB,KAAM,GACNe,SAAS,IAH0B,mBAChCC,EADgC,KACzBC,EADyB,KAyBvC,OAnBAC,qBAAW,WACP1B,EAAYC,GACX0B,MAAK,SAAAC,GACFC,YAAY,WACRJ,EAAS,CACLjB,KAAKoB,EACLL,SAAS,MAEf,WAGP,CAAEtB,IAQEuB,EDtB0BM,CAAc7B,GAAlCa,EAF4B,EAEjCN,KAAae,EAFoB,EAEpBA,QAIrB,OACI,qCACA,mCAAMtB,EAAN,OAEA,sBAAKkB,UAAW,6DAAhB,UAESI,GAAW,wCACTT,EAAOJ,KAAK,SAACC,GACZ,OAAQ,cAAC,EAAD,eAAiCA,GAAZA,EAAIC,cELxCmB,EAAgB,WAAM,MAGQ7C,mBAAU,CAAC,kBAHnB,mBAGtB8C,EAHsB,KAGT/C,EAHS,KAO/B,OACI,qCACA,iDACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAIA,6BAKS+C,EAAWtB,KAAK,SAACuB,GAAD,OACb,cAAC,EAAD,CAA6BhC,UAAWgC,GAArBA,YCxBxBC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAQ1BX,M","file":"static/js/main.a9e99be8.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategorias} ) =>{\r\n    \r\n    const [inputValue, setInputValue ] = useState('')\r\n    \r\n    // Para poder actualizar el elemento que esta dentro del input \r\n    // se necesitara esta funcion para que actualize elcontenido \r\n    // del imput\r\n    const cambioValorInput = (valor) =>{\r\n        setInputValue( valor.target.value);\r\n    }\r\n    // Se realiza esta funcion para que el envio de info del input\r\n    // no sea por default y lo hagamos como un cambio de estado \r\n    const envioInfo = (e)=> {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2){\r\n            setCategorias( val => [inputValue,...val] );\r\n            // Para limpiar el valor dentro de input\r\n            setInputValue('');\r\n        }\r\n    \r\n    }\r\n    return (\r\n        <form onSubmit= {envioInfo}>\r\n            <h2> AÃ±ade Categoria </h2>\r\n            <input\r\n            type=\"text\"\r\n            value= {inputValue}\r\n            onChange= { cambioValorInput }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n  \r\n\r\nAddCategory.propTypes={\r\n    setCategorias:PropTypes.func.isRequired\r\n}","\r\n\r\n//Peticion a servicio\r\nexport const obtenerGift = async (categoria) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=Qm5No3NgtLd5hUwteeq3TryA35qgEviG`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    // Extrayendo la informacion que necesitamos de data\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    }\r\n    )\r\n     \r\n    // setImages(gifs);\r\n    console.log(gifs);\r\n    \r\n    return gifs;   \r\n\r\n    // console.log('estoas son imgagenes = '+images[1].id);\r\n}","import React from 'react'\r\n\r\nexport const MarcoParaGifts = ( {id,title,url} ) =>{\r\n    console.log(id,title,url);\r\n    return (\r\n        <div className ='card animate__animated animate__fadeInDown'>\r\n            <img src= {url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { obtenerGift } from '../helpers/obtenerGifts';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { MarcoParaGifts } from './MarcoParaGifts';\r\n\r\nexport const GifColeccion = ( {categoria}) =>{\r\n    \r\n    const { data:images ,loading } = useFetchGifs (categoria);\r\n    // const [images,setImages] = useState([]);\r\n    //obtenerGift();  \r\n    \r\n    return (\r\n        <>\r\n        <h3> {categoria} </h3>\r\n        {/* {loading ? 'Cargando' :'Data CArgada'} */}\r\n        <div className= 'contenedor-de-cartas animate__animated animate__backInDown'>\r\n            \r\n                {loading && <p>Loading</p>}\r\n                 { images.map( (img ) => { \r\n                    return (<MarcoParaGifts key={img.id} {...img}  />) } ) } \r\n            \r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n// useEffect( () => {\r\n//     //Codigo afectado\r\n// }, [])\r\n","import {useEffect, useState} from 'react'\r\nimport { obtenerGift } from '../helpers/obtenerGifts';\r\n\r\n\r\nexport const useFetchGifs = (categoria) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        obtenerGift(categoria)\r\n        .then(imgs => {\r\n            setTimeout( () => {\r\n                setState({\r\n                    data:imgs,\r\n                    loading: false\r\n                });\r\n            },2500)\r\n        })\r\n    //Codigo afectado\r\n    }, [ categoria ] )\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,2,2],\r\n    //         loading: false \r\n    //     })\r\n    // }, 3000);\r\n    return state\r\n}","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifColeccion } from './components/GifColeccion';\r\n\r\nexport const giftExpertApp = () =>{\r\n    ReactDOM.render(\r\n        <>\r\n        <h2>Gift Expert App</h2>\r\n        <hr></hr>\r\n        </>,document.getElementById('root')\r\n    );\r\n}\r\n\r\nexport const GiftExpertApp = () => {\r\n    \r\n    //  const categorias = ['Atack on titans','Chivas','Dragon Ball'];\r\n      const [categorias , setCategorias] = useState (['Rocket League']);\r\n    //  const handleAdd = () =>{\r\n    //     setCategorias([...categorias,'L'] );\r\n    //  }\r\n    return (\r\n        <>\r\n        <h1>Gift Expert App</h1>\r\n        <AddCategory setCategorias={setCategorias} />\r\n\r\n        <hr />\r\n\r\n        {/* <button onClick= {handleAdd} >Agregar</button> */}\r\n\r\n        <ol>   \r\n            {\r\n                // Para el Barrido del arreglo categorias en el HTML\r\n                // se requiere del metodo .map para poder visualizarlo\r\n                // o recorrerlo\r\n                 categorias.map( (category) => (\r\n                    <GifColeccion key={category} categoria={category} />\r\n                    \r\n                    // key={category}\r\n                    // category={category} \r\n                    // />\r\n                 )\r\n                     \r\n                    // <GifColeccion \r\n                    // // key={category}\r\n                    // category={category} \r\n                    // />\r\n                 \r\n                 )  \r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp, giftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GiftExpertApp />,\n  document.getElementById('root')\n)\n\n// giftExpertApp();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}